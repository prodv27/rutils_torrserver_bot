import logging
import os
import json
import secrets
import string
import subprocess
import uuid
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from throttling import ThrottlingMiddleware  # –ò–º–ø–æ—Ä—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ Middleware

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
SBP_PHONE = os.getenv("SBP_PHONE")
TORR_SERVER_ADDRESS = os.getenv("TORR_SERVER_ADDRESS")
ADMIN_WALLET = os.getenv("ADMIN_WALLET")

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ —Å—Ä–æ–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è
ACCS_DB_PATH = os.environ.get("ACCS_DB_PATH", "database/accs.db")
EXPIRY_DB_PATH = os.environ.get("EXPIRY_DB_PATH", "database/expiry.db")
TRIAL_USAGE_DB_PATH = os.environ.get("TRIAL_USAGE_DB_PATH", "database/trial_usage.db")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="bot.log",
)
logger = logging.getLogger("main")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(ThrottlingMiddleware(rate_limit=1))  # 1 –∑–∞–ø—Ä–æ—Å –≤ —Å–µ–∫—É–Ω–¥—É
scheduler = AsyncIOScheduler()

# ====== –†–µ—Å—Ç–∞—Ä—Ç —Ç–æ—Ä—Ä—Å–µ—Ä–≤–µ—Ä ======
def restart_torrserver():
    """
    –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç TorrServer.
    """
    try:
        subprocess.run(["systemctl", "restart", "torrserver"], check=True)
        logging.info("TorrServer —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.")
    except subprocess.CalledProcessError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ TorrServer: {e}")

# ====== –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ======
def load_trial_usage():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    """
    if not os.path.exists(TRIAL_USAGE_DB_PATH):
        with open(TRIAL_USAGE_DB_PATH, "w") as file:
            json.dump([], file)
    with open(TRIAL_USAGE_DB_PATH, "r") as file:
        return json.load(file)


def save_trial_usage(trial_users):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    """
    with open(TRIAL_USAGE_DB_PATH, "w") as file:
        json.dump(trial_users, file, indent=4)

def check_if_trial(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–±–Ω–æ–π.
    """
    trial_users = load_trial_usage()
    return user_id in trial_users

def parse_expiry_date(expiry_str):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.
    """
    for fmt in ("%Y-%m-%d %H:%M:%S", "%Y-%m-%d"):
        try:
            return datetime.strptime(expiry_str, fmt)
        except ValueError:
            continue
    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {expiry_str}")


# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞ ======
def inline_main_menu():
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    """
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay"),
        InlineKeyboardButton("üìÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="status"),
        InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏", callback_data="get_account"),
        InlineKeyboardButton("üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="trial"),
        InlineKeyboardButton("üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏", url="https://t.me/RUtils_TorrServer_chat")
    )
    return keyboard



# ====== –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ======
def support_chat_button():
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    """
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏", url="https://t.me/RUtils_TorrServer_chat"))
    return keyboard

# ====== –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ======
def back_to_main_menu():
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return keyboard

# ====== –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ ======
def schedule_reminders():
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 3 –¥–Ω—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    expiry = load_json(EXPIRY_DB_PATH)
    now = datetime.now()

    for username, expiry_str in expiry.items():
        try:
            expiry_date = datetime.strptime(expiry_str, "%Y-%m-%d")
            reminder_date = expiry_date - timedelta(days=3)

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∞
            if reminder_date > now:
                user_id = int(username.replace("User", ""))  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                scheduler.add_job(
                    send_reminder,
                    DateTrigger(run_date=reminder_date),
                    args=[user_id, expiry_date.strftime("%Y-%m-%d")],
                    id=f"reminder_{user_id}"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {username}: {e}")


async def send_reminder(user_id, expiry_date):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    :param user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param expiry_date: –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    try:
        await bot.send_message(
            user_id,
            f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è (–¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {expiry_date}).\n"
            f"–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º."
        )
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def on_startup(dp):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.
    """
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞...")

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    if not scheduler.running:
        scheduler.start()

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    schedule_reminders()

# ====== –†–∞–±–æ—Ç–∞ —Å TorrServer –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ ======
def load_json(file_path):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞.
    """
    if os.path.exists(file_path):
        with open(file_path, "r") as f:
            return json.load(f)
    return {}

def save_json(file_path, data):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON-—Ñ–∞–π–ª.
    """
    with open(file_path, "w") as f:
        json.dump(data, f, indent=4)

def generate_password(length=12):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å.
    """
    alphabet = string.ascii_letters + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(length))


def create_or_extend_torr_account(user_id, additional_days):
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç —É—á—ë—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ TorrServer.
    """
    username = f"User{user_id}"
    password = generate_password()
    accs = load_json(ACCS_DB_PATH)
    expiry = load_json(EXPIRY_DB_PATH)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    current_expiry_str = expiry.get(username, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    try:
        current_expiry = parse_expiry_date(current_expiry_str)
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã –¥–ª—è {username}: {e}")
        current_expiry = datetime.now()

    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    new_expiry = max(current_expiry, datetime.now()) + timedelta(days=additional_days)
    expiry[username] = new_expiry.strftime("%Y-%m-%d %H:%M:%S")

    # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—á—ë—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
    accs[username] = accs.get(username, password)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_json(ACCS_DB_PATH, accs)
    save_json(EXPIRY_DB_PATH, expiry)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º TorrServer
    restart_torrserver()

    return username, accs[username], new_expiry.strftime("%Y-%m-%d %H:%M:%S")

def calculate_subscription_days(amount):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã.
    """
    logging.info(f"–í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Å—É–º–º—ã: {amount}")
    if amount in [100, 1]:  # 1 –º–µ—Å—è—Ü
        return 30
    elif amount in [300, 3]:  # 3 –º–µ—Å—è—Ü–∞
        return 90
    elif amount in [600, 6]:  # 6 –º–µ—Å—è—Ü–µ–≤
        return 180
    else:
        logging.error(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞: {amount}")
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞: {amount}")


def restart_torrserver():
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç TorrServer.
    """
    try:
        os.system("systemctl restart torrserver.service")
        logger.info("TorrServer —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ TorrServer: {e}")


@dp.message_handler(commands=["delete_subscription"])
async def delete_subscription_command(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    if message.from_user.id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    expiry = load_json(EXPIRY_DB_PATH)
    accs = load_json(ACCS_DB_PATH)

    if not expiry:
        await message.reply("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=1)
    for username, expiry_date in expiry.items():
        keyboard.add(InlineKeyboardButton(f"{username} (–¥–æ {expiry_date})", callback_data=f"delete_{username}"))

    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith("delete_"))
async def delete_subscription_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    username = callback_query.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    expiry = load_json(EXPIRY_DB_PATH)
    accs = load_json(ACCS_DB_PATH)

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–º–µ–Ω–∏ (User<ID>)
    try:
        user_id = int(username.replace("User", ""))
    except ValueError:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    if username not in expiry:
        await callback_query.message.edit_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —É–¥–∞–ª—ë–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
            reply_markup=None
        )
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑
    del expiry[username]
    if username in accs:
        del accs[username]

    save_json(EXPIRY_DB_PATH, expiry)
    save_json(ACCS_DB_PATH, accs)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            user_id,
            "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã.",
            reply_markup=support_chat_button()
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await callback_query.message.edit_text(
        f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
        reply_markup=None
    )
    await callback_query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
    

@dp.callback_query_handler(lambda c: c.data == "trial")
async def trial_button_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥".
    """
    user_id = callback_query.from_user.id
    username = f"User{user_id}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    expiry = load_json(EXPIRY_DB_PATH)
    if username in expiry:
        expiry_date = parse_expiry_date(expiry[username])
        if expiry_date > datetime.now():
            await callback_query.message.edit_text(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
                "–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=back_to_main_menu()
            )
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    trial_users = load_trial_usage()
    if user_id in trial_users:
        await callback_query.message.edit_text(
            "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=back_to_main_menu()
        )
        return

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    password = generate_password()
    trial_end_time = datetime.now() + timedelta(hours=8)

    accs = load_json(ACCS_DB_PATH)
    accs[username] = password
    expiry[username] = trial_end_time.strftime("%Y-%m-%d %H:%M:%S")

    save_json(ACCS_DB_PATH, accs)
    save_json(EXPIRY_DB_PATH, expiry)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–µ–≥–æ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    trial_users.append(user_id)
    save_trial_usage(trial_users)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º TorrServer
    restart_torrserver()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback_query.message.edit_text(
        f"–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 8 —á–∞—Å–æ–≤.\n\n"
        f"*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*\n"
        f"*–ê–¥—Ä–µ—Å:* {TORR_SERVER_ADDRESS}\n"
        f"*–õ–æ–≥–∏–Ω:* {username}\n"
        f"*–ü–∞—Ä–æ–ª—å:* {password}\n"
        f"*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* {trial_end_time.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å!",
        reply_markup=back_to_main_menu(),
        parse_mode="Markdown"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await bot.send_message(
        ADMIN_ID,
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: {user_id}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n\n"
        f"*–õ–æ–≥–∏–Ω:* {username}\n"
        f"*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* {trial_end_time.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        f"–ü–∞—Ä–æ–ª—å: {password}",
        parse_mode="Markdown"
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    scheduler.add_job(
        delete_trial_account,
        trigger=DateTrigger(run_date=trial_end_time),
        args=[username],
        id=f"trial_{username}"
    )
    await callback_query.answer()



def delete_trial_account(username):
    """
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.
    """
    accs = load_json(ACCS_DB_PATH)
    expiry = load_json(EXPIRY_DB_PATH)

    if username in accs:
        del accs[username]
    if username in expiry:
        del expiry[username]

    save_json(ACCS_DB_PATH, accs)
    save_json(EXPIRY_DB_PATH, expiry)

    logging.info(f"–ü—Ä–æ–±–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç {username} –±—ã–ª —É–¥–∞–ª—ë–Ω.")


@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    """
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ TorrServer. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=inline_main_menu()
    )

@dp.callback_query_handler(lambda c: c.data.startswith("topup_reject_"))
async def topup_reject_callback(callback_query: types.CallbackQuery):
    """
    –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    """
    user_id = int(callback_query.data.split("_")[2])

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            user_id,
            "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await callback_query.message.edit_text(
        f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.",
        reply_markup=None
    )
    await callback_query.answer("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")


@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def main_menu_button_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".
    """
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=inline_main_menu()
    )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "get_account")
async def get_account_button_callback(callback_query: types.CallbackQuery):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.
    """
    user_id = callback_query.from_user.id
    username = f"User{user_id}"
    accs = load_json(ACCS_DB_PATH)
    expiry = load_json(EXPIRY_DB_PATH)

    if username in accs and username in expiry:
        try:
            expiry_date = parse_expiry_date(expiry[username])  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        except ValueError as e:
            await callback_query.message.edit_text(
                f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                reply_markup=support_chat_button()
            )
            return

        if expiry_date > datetime.now():
            is_trial = check_if_trial(user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∫–∞–∫ –ø—Ä–æ–±–Ω–∞—è
            message = (
                f"*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TorrServer:*\n\n"
                f"*–ê–¥—Ä–µ—Å:* {TORR_SERVER_ADDRESS}\n"
                f"*–õ–æ–≥–∏–Ω:* {username}\n"
                f"*–ü–∞—Ä–æ–ª—å:* {accs[username]}\n"
                f"*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:* {expiry_date.strftime('%Y-%m-%d %H:%M:%S')}\n"
            )
            if is_trial:
                message += "\n*–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (8 —á–∞—Å–æ–≤)\n"
            else:
                message += "\n*–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* –û–±—ã—á–Ω–∞—è\n"

            await callback_query.message.edit_text(
                message,
                reply_markup=back_to_main_menu(),
                parse_mode="Markdown"
            )
            return

    await callback_query.message.edit_text(
        "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=back_to_main_menu()
    )
    await callback_query.answer()



@dp.message_handler(lambda message: message.text == "üîë –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏")
async def get_account_command(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.
    """
    user_id = message.from_user.id
    username = f"User{user_id}"
    accs = load_json(ACCS_DB_PATH)
    expiry = load_json(EXPIRY_DB_PATH)

    if username in accs and username in expiry:
        expiry_date = datetime.strptime(expiry[username], "%Y-%m-%d")
        if expiry_date > datetime.now():
            await message.reply(
                f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TorrServer:\n\n"
                f"**–ê–¥—Ä–µ—Å:** {TORR_SERVER_ADDRESS}\n"
                f"**–õ–æ–≥–∏–Ω:** {username}\n"
                f"**–ü–∞—Ä–æ–ª—å:** {accs[username]}\n"
                f"**–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:** {expiry_date.strftime('%Y-%m-%d')}\n\n"
                f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!",
                parse_mode="Markdown"
            )
        else:
            await message.reply("‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é.")



@dp.message_handler(commands=["admin_create"])
async def admin_create_account(message: types.Message):
    """
    –°–æ–∑–¥–∞—ë—Ç —É—á—ë—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –≤—Ä—É—á–Ω—É—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞).
    """
    if message.from_user.id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã
    try:
        args = message.text.split()
        if len(args) < 2:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")

        username = args[1]
        password = args[2] if len(args) > 2 else generate_password()
        days = int(args[3]) if len(args) > 3 else 30

        accs = load_json(ACCS_DB_PATH)
        expiry = load_json(EXPIRY_DB_PATH)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ª–æ–≥–∏–Ω
        if username in accs:
            await message.reply(f"–£—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —Å –ª–æ–≥–∏–Ω–æ–º `{username}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
        accs[username] = password
        expiry_date = datetime.now() + timedelta(days=days)
        expiry[username] = expiry_date.strftime("%Y-%m-%d")

        save_json(ACCS_DB_PATH, accs)
        save_json(EXPIRY_DB_PATH, expiry)

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ TorrServer
        restart_torrserver()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await message.reply(
            f"–£—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞:\n"
            f"*–õ–æ–≥–∏–Ω:* {username}\n"
            f"*–ü–∞—Ä–æ–ª—å:* {password}\n"
            f"*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* {expiry_date.strftime('%Y-%m-%d')}\n"
            f"TorrServer –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."
        )
    except ValueError:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n`/admin_create –ª–æ–≥–∏–Ω [–ø–∞—Ä–æ–ª—å] [–¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏]`", parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.")

@dp.callback_query_handler(lambda c: c.data == "pay")
async def pay_button_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É".
    """
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü –û–∑–æ–Ω –ë–∞–Ω–∫", callback_data="pay_sbp"),
        InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram-–∫–æ—à–µ–ª—ë–∫", callback_data="pay_tg_wallet"),
        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )

    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=keyboard
    )
    await callback_query.answer()

# –°–ë–ü –û–ó–û–ù –ë–ê–ù–ö -----------------------------------------------------------------------------------------------------

@dp.callback_query_handler(lambda c: c.data == "pay_sbp")
async def pay_sbp_callback(callback_query: types.CallbackQuery):
    """
    –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü –û–∑–æ–Ω –ë–∞–Ω–∫.
    """
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("1 –º–µ—Å—è—Ü - 100 —Ä—É–±", callback_data="topup_sbp_amount_100"),
        InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ - 300 —Ä—É–±", callback_data="topup_sbp_amount_300"),
        InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ - 600 —Ä—É–±", callback_data="topup_sbp_amount_600"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pay")
    )

    await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü –û–∑–æ–Ω –ë–∞–Ω–∫. –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –Ω–æ–º–µ—Ä:\n\n"
        f"üí≥ {SBP_PHONE}\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.",
        reply_markup=keyboard
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("topup_sbp_amount_"))
async def handle_sbp_topup(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü –û–∑–æ–Ω –ë–∞–Ω–∫.
    """
    amount = int(callback_query.data.split("_")[-1])
    unique_id = str(uuid.uuid4())[:8]
    user_id = callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ –Ω–∞ —Å—É–º–º—É *{amount} —Ä—É–±.*\n\n"
        f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —ç—Ç—É —Å—É–º–º—É —á–µ—Ä–µ–∑ –°–ë–ü –û–∑–æ–Ω –ë–∞–Ω–∫ –Ω–∞ –Ω–æ–º–µ—Ä:\n"
        f"üí≥ {SBP_PHONE}\n\n"
        f"‚ÄºÔ∏è –£–∫–∞–∂–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: `{unique_id}`\n\n"
        f"–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏–ª'.",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–û–ø–ª–∞—Ç–∏–ª", callback_data=f"topup_sbp_paid_{amount}_{unique_id}")

        ),
        parse_mode="Markdown"
    )
    logging.info(f"Callback data: {callback_query.data}")
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("topup_sbp_paid_"))
async def topup_sbp_paid_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏–ª" –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü.
    """
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        data = callback_query.data.split("_")
        amount = int(data[3])  # –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        unique_id = data[4]    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä

        user_id = callback_query.from_user.id
        username = callback_query.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard_admin = InlineKeyboardMarkup(row_width=1)
        keyboard_admin.add(
            InlineKeyboardButton(
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"topup_confirm_sbp_{user_id}_{amount}_{unique_id}"
            ),
            InlineKeyboardButton(
                "–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"topup_reject_sbp_{user_id}"
            )
        )

        await bot.send_message(
            ADMIN_ID,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) —Å–æ–æ–±—â–∏–ª –æ –ø–µ—Ä–µ–≤–æ–¥–µ —á–µ—Ä–µ–∑ –°–ë–ü.\n\n"
            f"–°—É–º–º–∞: *{amount} —Ä—É–±.*\n"
            f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: `{unique_id}`",
            reply_markup=keyboard_admin,
            parse_mode="Markdown"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback_query.message.edit_text(
            "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=back_to_main_menu()
        )
        await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.", show_alert=True)

@dp.callback_query_handler(lambda c: c.data.startswith("topup_confirm_sbp_"))
async def topup_confirm_sbp_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    """
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        data = callback_query.data.split("_")
        user_id = int(data[3])  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        amount = int(data[4])  # –°—É–º–º–∞
        unique_id = data[5]    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä

        # –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã
        days = calculate_subscription_days(amount)

        # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º —É—á—ë—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
        username, password, expiry_date = create_or_extend_torr_account(user_id, additional_days=days)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            user_id,
            f"–í–∞—à –ø–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É *{amount} —Ä—É–±.* —á–µ—Ä–µ–∑ –°–ë–ü —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.\n\n"
            f"*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TorrServer:*\n"
            f"üåê *–ê–¥—Ä–µ—Å:* {TORR_SERVER_ADDRESS}\n"
            f"üîë *–õ–æ–≥–∏–Ω:* `{username}`\n"
            f"üîë *–ü–∞—Ä–æ–ª—å:* `{password}`\n"
            f"üìÖ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* {expiry_date}\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!",
            parse_mode="Markdown"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await callback_query.message.edit_text(
            f"–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n\n"
            f"–°—É–º–º–∞: {amount} —Ä—É–±.\n"
            f"–õ–æ–≥–∏–Ω: `{username}`\n"
            f"–ü–∞—Ä–æ–ª—å: `{password}`\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiry_date}",
            parse_mode="Markdown"
        )
        await callback_query.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", show_alert=True)

# TELEGRAM ------------------------------------------------------------------------------------------------------------------------------

@dp.callback_query_handler(lambda c: c.data == "pay_tg_wallet")
async def pay_tg_wallet_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram-–∫–æ—à–µ–ª—ë–∫.
    """
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("1 –º–µ—Å—è—Ü - 1 USDT", callback_data="topup_tg_wallet_amount_1"),
        InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ - 3 USDT", callback_data="topup_tg_wallet_amount_3"),
        InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ - 6 USDT", callback_data="topup_tg_wallet_amount_6"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pay")
    )

    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram-–∫–æ—à–µ–ª—ë–∫. –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞:\n\n"
        f"üí≥ {ADMIN_WALLET}\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.",
        reply_markup=keyboard
    )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("topup_tg_wallet_amount_"))
async def handle_tg_wallet_topup(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram-–∫–æ—à–µ–ª—ë–∫.
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ callback_data
        amount = int(callback_query.data.split("_")[-1])  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É (1, 3, 6)
        unique_id = str(uuid.uuid4())[:8]  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞

        logging.info(f"–í—ã–±—Ä–∞–Ω–∞ —Å—É–º–º–∞: {amount} USDT")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–û–ø–ª–∞—Ç–∏–ª"
        await callback_query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ –Ω–∞ —Å—É–º–º—É *{amount} USDT* –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —ç—Ç—É —Å—É–º–º—É —á–µ—Ä–µ–∑ Telegram-–∫–æ—à–µ–ª—ë–∫ –Ω–∞:\n"
            f"üí≥ {ADMIN_WALLET}\n\n"
            f"‚ÄºÔ∏è –£–∫–∞–∂–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: `{unique_id}`\n\n"
            f"–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏–ª'.",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("–û–ø–ª–∞—Ç–∏–ª", callback_data=f"topup_tg_wallet_paid_{unique_id}_{amount}")
            ),
            parse_mode="Markdown"
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ —á–µ—Ä–µ–∑ Telegram-–∫–æ—à–µ–ª—ë–∫: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)


@dp.callback_query_handler(lambda c: c.data.startswith("topup_tg_wallet_paid_"))
async def topup_tg_wallet_paid_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏–ª" –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram-–∫–æ—à–µ–ª—ë–∫.
    """
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        data = callback_query.data.split("_")
        unique_id = data[4]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        amount = int(data[5])  # –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞

        user_id = callback_query.from_user.id
        username = callback_query.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard_admin = InlineKeyboardMarkup(row_width=1)
        keyboard_admin.add(
            InlineKeyboardButton(
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"topup_confirm_tg_wallet_{user_id}_{amount}_{unique_id}"
            ),
            InlineKeyboardButton(
                "–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"topup_reject_tg_wallet_{user_id}"
            )
        )

        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –ø–ª–∞—Ç–µ–∂–µ Telegram-–∫–æ—à–µ–ª—å–∫–æ–º: user_id={user_id}, amount={amount}, unique_id={unique_id}")

        await bot.send_message(
            ADMIN_ID,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) —Å–æ–æ–±—â–∏–ª –æ –ø–µ—Ä–µ–≤–æ–¥–µ —á–µ—Ä–µ–∑ Telegram-–∫–æ—à–µ–ª—ë–∫.\n\n"
            f"–°—É–º–º–∞: *{amount} USDT*\n"
            f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: `{unique_id}`",
            reply_markup=keyboard_admin,
            parse_mode="Markdown"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback_query.message.edit_text(
            "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=back_to_main_menu()
        )

        await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ topup_tg_wallet_paid_callback: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", show_alert=True)


@dp.callback_query_handler(lambda c: c.data.startswith("topup_confirm_tg_wallet_"))
async def topup_confirm_tg_wallet_callback(callback_query: types.CallbackQuery):
    logging.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω —Å callback_data: {callback_query.data}")
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        data = callback_query.data.split("_")
        user_id = int(data[4])  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        amount = int(data[5])  # –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        unique_id = data[6]    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä

        logging.info(f"–†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: user_id={user_id}, amount={amount}, unique_id={unique_id}")

        # –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        days = calculate_subscription_days(amount)
        username, password, expiry_date = create_or_extend_torr_account(user_id, additional_days=days)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            user_id,
            f"–í–∞—à –ø–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É *{amount} USDT* —á–µ—Ä–µ–∑ Telegram-–∫–æ—à–µ–ª—ë–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.\n\n"
            f"*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TorrServer:*\n"
            f"üåê *–ê–¥—Ä–µ—Å:* {TORR_SERVER_ADDRESS}\n"
            f"üîë *–õ–æ–≥–∏–Ω:* `{username}`\n"
            f"üîë *–ü–∞—Ä–æ–ª—å:* `{password}`\n"
            f"üìÖ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* {expiry_date}\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!",
            parse_mode="Markdown"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await callback_query.message.edit_text(
            f"–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram-–∫–æ—à–µ–ª—ë–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n\n"
            f"–°—É–º–º–∞: {amount} USDT.\n"
            f"–õ–æ–≥–∏–Ω: `{username}`\n"
            f"–ü–∞—Ä–æ–ª—å: `{password}`\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiry_date}",
            parse_mode="Markdown"
        )
        await callback_query.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ topup_confirm_tg_wallet_callback: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", show_alert=True)


# -------------------------------------------------------------------------------------------------------------

@dp.callback_query_handler(lambda c: c.data == "status")
async def status_button_callback(callback_query: types.CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    user_id = callback_query.from_user.id
    username = f"User{user_id}"
    expiry = load_json(EXPIRY_DB_PATH)

    if username in expiry:
        try:
            expiry_date = parse_expiry_date(expiry[username])  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        except ValueError as e:
            await callback_query.message.edit_text(
                f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                reply_markup=support_chat_button()
            )
            return

        if expiry_date > datetime.now():
            is_trial = check_if_trial(user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∫–∞–∫ –ø—Ä–æ–±–Ω–∞—è
            message = (
                f"–í–∞—à —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
                f"*–õ–æ–≥–∏–Ω:* {username}\n"
                f"*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:* {expiry_date.strftime('%Y-%m-%d %H:%M:%S')}\n"
            )
            if is_trial:
                message += "\n*–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (8 —á–∞—Å–æ–≤)\n"
            else:
                message += "\n*–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* –û–±—ã—á–Ω–∞—è\n"

            await callback_query.message.edit_text(
                message,
                reply_markup=back_to_main_menu(),
                parse_mode="Markdown"
            )
            return

    await callback_query.message.edit_text(
        "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=back_to_main_menu()
    )
    await callback_query.answ



@dp.message_handler(lambda message: message.text == "üìÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏")
async def status_command(message: types.Message):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    user_id = message.from_user.id
    expiry = load_json(EXPIRY_DB_PATH)
    username = f"User{user_id}"

    expiry_date = expiry.get(username)
    if expiry_date:
        expiry_date = datetime.strptime(expiry_date, "%Y-%m-%d")
        if expiry_date > datetime.now():
            await message.reply(
                f"–í–∞—à —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
                f"**–õ–æ–≥–∏–Ω:** {username}\n"
                f"**–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:** {expiry_date.strftime('%Y-%m-%d')}\n\n"
                f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!",
                parse_mode="Markdown"
            )
        else:
            await message.reply("‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é.")


@dp.callback_query_handler(lambda c: c.data.startswith("reject_"))
async def reject_callback(callback_query: types.CallbackQuery):
    """
    –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    user_id = int(callback_query.data.split("_")[1])

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(
        user_id,
        "–í–∞—à –ø–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await callback_query.message.edit_text(
        f"–ü–ª–∞—Ç—ë–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω."
    )


# ====== –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ======
if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
